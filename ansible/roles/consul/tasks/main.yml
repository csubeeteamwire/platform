- name: Create 3rd party download directory
  file:
    dest: /var/cache/downloads
    state: directory
    mode: 0755

- name: Check if Consul is already installed
  stat: path=/usr/local/bin/consul
  register: consul_binary

- name: Gather information about Consul
  block:
    - name: Gather Consul version information
      command: consul version
      register: consul_version_cmd
      changed_when: false
    - name: Parse Consul information
      set_fact:
        consul_version_current: "{{ consul_version_cmd.stdout_lines[0] | regex_search('\\d+\\.\\d+\\.\\d+') }}"
  when: consul_binary.stat.exists

- name: Download Consul
  get_url:
    url: https://releases.hashicorp.com/consul/{{ consul_version }}/consul_{{ consul_version }}_linux_amd64.zip
    dest: /var/cache/downloads/consul_{{ consul_version }}_linux_amd64.zip
    checksum: "sha256:{{ consul_checksum }}"
    use_proxy: '{{ "yes" if http_proxy is defined else omit }}' # noqa var-spacing
  register: consul_downloaded
  environment:
    https_proxy: "{{ http_proxy|default() }}"

- name: Install/Update the Consul binary
  unarchive:
    src: /var/cache/downloads/consul_{{ consul_version }}_linux_amd64.zip
    dest: /usr/local/bin
    mode: 0755
    copy: false
  notify: restart consul
  when: consul_downloaded.changed or not consul_binary.stat.exists # noqa no-handler

- name: Create Consul config and scripts directories
  file:
    name: "{{ item }}"
    state: directory
  with_items:
    - "/etc/consul.d"
    - "/etc/consul.d/scripts/"

- name: Write Consul server configuration file
  template:
    src: 10-server.json.j2
    dest: /etc/consul.d/10-server.json
  when: '"hashi_servers" in group_names'
  notify: restart consul

- name: Write Consul agent configuration file
  template:
    src: 20-agent.json.j2
    dest: /etc/consul.d/20-agent.json
  notify: restart consul

- name: Install Consul systemd config
  copy:
    src: consul.service
    dest: /etc/systemd/system/consul.service
  notify:
    - restart consul

# redirect DNS to consul
- name: Add consul forwarding to dnsmasq
  template:
    src: 10-consul.j2
    dest: /etc/dnsmasq.d/10-consul
  notify: restart dnsmasq

- name: Enable the Consul service
  service: name=consul state=started enabled=yes daemon_reload=yes

# Upgraded binary has already been placed previously
# The new version will take effect as soon as Consul process is restarted
- name: Upgrade Consul node
  block:
    - name: Quit cluster
      command: consul leave

    - name: Restart Consul to re-join cluster
      service:
        name: consul
        state: restarted

    - name: Gather version information about upgraded Consul
      command: consul version
      register: consul_upgraded_version_cmd
      changed_when: false

    - name: Parse upgraded Consul version information
      set_fact:
        consul_upgraded_version: "{{ consul_upgraded_version_cmd.stdout_lines[0] | regex_search('\\d+\\.\\d+\\.\\d+') }}"

    - name: Verify upgrade succeeded
      assert:
        that: consul_upgraded_version is version(consul_version, '==')

  when:
    - consul_binary.stat.exists
    - consul_version_current is version(consul_version, '<')
