/* Command objects */

object NotificationCommand "mail-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}

/* basically the same check as supplied, only the mindless defaults removed */
object CheckCommand "dns-no-defaults" {
  import "plugin-check-command"
  import "ipv4-or-ipv6"

  command = [ PluginDir + "/check_dns" ]

  arguments = {
    "-H" = {
      value = "$dns_lookup$"
      description = "The name or address you want to query."
    }
    "-s" = {
      value = "$dns_server$"
      description = "Optional DNS server you want to use for the lookup."
    }
    "-a" = {
      value = "$dns_expected_answers$"
      description = "Optional ip address or host you expect the DNS server to return. Host must end with a dot (.). This option can be repeated multiple times (Returns OK if any value match). If multiple addresses are returned at once, you have to match the whole string of addresses separated with commas (sorted alphabetically)."
    }
    "-a_old" = {
      key = "-a"
      value ="$dns_expected_answer$"
    }
    "-A" = {
      set_if = "$dns_authoritative$"
    }
    "-w" = {
      value = "$dns_wtime$"
      description = "Return warning if elapsed time exceeds value."
    }
    "-c" = {
      value = "$dns_ctime$"
      description = "Return critical if elapsed time exceeds value."
    }
    "-t" = {
      value = "$dns_timeout$"
      description = "Seconds before connection times out. Defaults to 10."
    }
  }

  vars.dns_timeout = 10
}

object CheckCommand "check_redis" {
	import "ipv4-or-ipv6"

	command = [ PluginContribDir + "/check_redis" ]

	arguments = {
		"--hostname" = {
			value = "$redis_hostname$"
			description = "Hostname or IP Address to check."
		}
		"--port" = {
			value = "$redis_port$"
			description = "Port number (default: 6379)."
		}
		"--database" = {
			value = "$redis_database$"
			description = "Optional database name (usually a number), needed for redis_query."
		}
		"--password" = {
			value = "$redis_password$"
			description = "Password for Redis authentication. Safer alternative is to put them in a file and use redis_credentials."
		}
		"--credentials" = {
			value = "$redis_credentials$"
			description = "Credentials file to read for Redis authentication."
		}
		"--timeout" = {
			value = "$redis_timeout$"
			description = "Allows to set timeout for execution of this plugin."
		}
		"--variables" = {
			value = "$redis_variables$"
			description = "List of variables from info data to do threshold checks on."
		}
		"--warn" = {
			value = "$redis_warn$"
			description = "This option can only be used if redis_variables is used and number of values listed here must exactly match number of variables specified."
		}
		"--crit" = {
			value = "$redis_crit$"
			description = "This option can only be used if redis_variables is used and number of values listed here must exactly match number of variables specified."
		}
		"--perfparse" = {
			set_if = "$redis_perfparse$"
			description = "This should only be used with variables and causes variable data not only to be printed as part of main status line but also as perfparse compatible output."
		}
		"--perfvars" = {
			value = "$redis_perfvars$"
			description = "This allows to list variables which values will go only into perfparse output (and not for threshold checking)."
		}
		"--prev_perfdata" = {
			value = "$service.perfdata$"
			set_if = "$redis_prev_perfdata$"
			description = "Previous performance data used to calculate rate of change for counter statistics variables and for proper calculation of hitrate."
		}
		"--rate_label" = {
			value = "$redis_rate_label$"
			description = "Prefix or Suffix label used to create a new variable which has rate of change of another base variable."
		}
		"--query" = {
			value = "$redis_query$"
			repeat_key = true
			description = "Option specifies key to query and optional variable name to assign the results to after. See the help output of the plugin for the detailed format."
		}
		"--option" = {
			value = "$redis_option$"
			repeat_key = true
			description = "Specifiers are separated by , and must include NAME or PATTERN. See the help output of the plugin for the detailed format."
		}
		"--response_time" = {
			value = "$redis_response_time$"
			description = "If this is used plugin will measure and output connection response time in seconds. With perfparse this would also be provided on perf variables."
		}
		"--hitrate" = {
			value = "$redis_hitrate$"
			description = "Calculates Hitrate."
		}
		"--memory_utilization" = {
			value = "$redis_memory_utilization$"
			description = "This calculates percent of total memory on system used by redis."
		}
		"--total_memory" = {
			value = "$redis_total_memory$"
			description = "Amount of memory on a system for memory utilization calculations above."
		}
		"--replication_delay" = {
			value = "$redis_replication_delay$"
			description = "Allows to set threshold on replication delay info."
		}
	}

	vars.redis_hostname = "$check_address$"
	vars.redis_perfparse = false
	vars.redis_prev_perfdata = false
}

object CheckCommand "memory" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_memory" ]

    arguments = {
      "-w" = {
         value = "$warning_threshold$"
      }
     "-c" = {
        value ="$critical_threshold$"
      }
     "-u" = {
        set_if = "$unit$"
     }
   }
}

object CheckCommand "check_time" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_ntp_time" ]

    arguments = {
      "-d" = {
         value = "$delay$"
      }
      "-H" = {
         value = "$timeserver$"
      }
    }
}

object CheckCommand "haproxy" {
    import "plugin-check-command"
    command = [ "sudo", PluginDir + "/check_haproxy_stats" ]

    arguments = {
        "--socket" = {
            value = "$socket$"
            description = "Path to the socket check_haproxy should connect to"
        }
    }
}

object CheckCommand "ssl_cert" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_cert_expire", "$cert$" ]

	arguments = {
		"-w" = {
			value = "$warn$"
			description = "Expiry warning threshold in seconds"
		}
		"-c" = {
			value = "$crit$"
			description = "Expiry critical threshold in seconds"
		}
	}
}

object CheckCommand "check_mysql_health" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_mysql_health" ]

    arguments = {
        "--critical" = "$mysql_health_crit$"
        "--database" = "$mysql_health_database$"
        "--hostname" = "$mysql_health_host$"
        "--labelformat" = "$mysql_health_label$"
        "--mode" = "$mysql_health_mode$"
        "--name" = "$mysql_health_name$"
        "--name2" = "$mysql_health_name2$"
        "--password" = "$mysql_health_password$"
        "--port" = "$mysql_health_port$"
        "--regexp" = "$mysql_health_regexp$"
        "--socket" = "$mysql_health_socket$"
        "--units" = "$mysql_health_units$"
        "--username" = "$mysql_health_username$"
        "--warning" = "$mysql_health_warn$"
    }
}

object CheckCommand "check_docker" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_docker.py" ]

	arguments = {
		"--connection" = {
			value = "$docker_connection$"
			description = "[/<path to>/docker.socket|<ip/host address>:<port>] Where to find docker daemon socket. (default: /var/run/docker.sock)"
		}
		"--secure-connection" = {
			value = "$docker_secure_connection$"
			description = "[<ip/host address>:<port>] Where to find TLS protected docker daemon socket."
		}
		"--binary_units" = {
			value = "$docker_binary_units$"
			description = "Use a base of 1024 when doing calculations of KB, MB, GB, & TB (This is default)"
		}
		"--decimal_units" = {
			value = "$docker_decimal_units$"
			description = "Use a base of 1000 when doing calculations of KB, MB, GB, & TB"
		}
		"--timeout" = {
			value = "$docker_timeout$"
			description = "Connection timeout in seconds. (default: 10.0)"
		}
		"--containers" = {
			value = "$docker_containers$"
			description = "CONTAINERS ...] One or more RegEx that match the names of the container(s) to check. If omitted all containers are checked. (default: ['all'])"
		}
		"--present" = {
			value = "$docker_present$"
			description = "Modifies --containers so that each RegEx must match at least one container."
		}
		"--threads" = {
			value = "$docker_threads$"
			description = "This + 1 is the maximum number of concurent threads/network connections. (default: 10)"
		}
		"--cpu" = {
			value = "$docker_cpu$"
			description = "Check cpu usage percentage taking into account any limits. Valid values are 0 - 100."
		}
		"--memory" = {
			value = "$docker_memory$"
			description = "Check memory usage taking into account any limits. Valid values for units are %,B,KB,MB,GB."
		}
		"--status" = {
			value = "$docker_status$"
			description = "Desired container status (running, exited, etc)."
		}
		"--health" = {
			value = "$docker_health$"
			description = "Check container's health check status"
		}
		"--uptime" = {
			value = "$docker_uptime$"
			description = "Minimum container uptime in seconds. Use when infrequent crashes are tolerated."
		}
		"--version" = {
			value = "$docker_version$"
			description = "Check if the running images are the same version as those in the registry. Useful for finding stale images. Does not support login."
		}
		"--insecure-registries" = {
			value = "$docker_insecure_reg$"
			description = "INSECURE_REGISTRIES [INSECURE_REGISTRIES] List of registries to connect to with http(no TLS).Useful when using --version with images frominsecure registries"
		}
		"--restarts" = {
			value = "$docker_restarts$"
			description = "Container restart thresholds."
		}
}
}

object CheckCommand "check_oom" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_oom", "$minutes_threshold$" ]

}

object CheckCommand "check_ufw" {
	import "plugin-check-command"

	command = [ "sudo", PluginDir + "/check_ufw" ]

}
