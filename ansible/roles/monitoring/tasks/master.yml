---
# Redis instance values are required for dynamic redis monitoring
- include_vars: ../../roles/redis/defaults/main.yml
  when: redis_instances is not defined

# Nomad job list is required for job status monitoring
- include_vars: ../../roles/nomad/defaults/main.yml
  when: nomad_jobs is not defined

- name: Install icinga2 Web UI and tools
  apt: name={{item}} state=present
  with_items:
  - icinga2-ido-mysql
  - icingaweb2
  - icingacli
  - icingaweb2-module-monitoring
  - python-mysqldb

- name: Install Web UI tools debian 9
  apt: name=mysql-client state=present
  when: ansible_distribution_release != "buster"

- name: Install Web UI tools debian 10
  apt: name=mariadb-client-10.3 state=present
  when: ansible_distribution_release == "buster"

- name: Configure Icinga MySQL adapter
  template: src=ido-mysql-conf.j2 dest=/etc/icinga2/features-available/ido-mysql.conf
  notify: restart icinga2

- name: Create Icinga Web 2 log directory
  file:
    dest: /var/log/icingaweb2
    state: directory
    mode: 0755
    group: icingaweb2

- name: Activate icinga2 features
  icinga2_feature:
    name: "{{ item }}"
    state: present
  with_items:
    - ido-mysql
    - command
  notify: restart icinga2

- name: Install icinga2 Web UI PHP/Apache requirements debian 9
  apt: name={{item}} state=present
  with_items:
  - apache2
  - libapache2-mod-php
  - php{{ php_version }}
  - php{{ php_version }}-mysql
  - php{{ php_version }}-curl
  - php{{ php_version }}-imagick
  - php{{ php_version }}-intl
  - php{{ php_version }}-gd
  - php{{ php_version }}-xml
  when: ansible_distribution_release != "buster"

- name: Install icinga2 Web UI PHP/Apache requirements debian 10
  apt: name={{item}} state=present
  with_items:
  - apache2
  - libapache2-mod-php
  - php{{ php_version_debian_10 }}
  - php{{ php_version_debian_10 }}-mysql
  - php{{ php_version_debian_10 }}-curl
  - php{{ php_version_debian_10 }}-imagick
  - php{{ php_version_debian_10 }}-intl
  - php{{ php_version_debian_10 }}-gd
  - php{{ php_version_debian_10 }}-xml
  when: ansible_distribution_release == "buster"

- name: Set Apache listening port
  copy:
    src: "{{ apache_ports_config }}"
    dest: /etc/apache2/ports.conf
  notify: restart apache

- name: Disable MPM event module
  apache2_module:
    name: mpm_event
    state: absent
    force: yes
    ignore_configcheck: true
  notify: restart apache

- name: Add user www-data to the icingaweb2 group
  user:
    name: www-data
    groups: icingaweb2

- name: Enable PHP module for Apache
  apache2_module:
    name: "php{{ php_version }}"
    state: present
    force: yes
    ignore_configcheck: true
  notify: restart apache
  when: ansible_distribution_release != "buster"

- name: Enable PHP module for Apache
  apache2_module:
    name: "php{{ php_version_debian_10 }}"
    state: present
    force: yes
    ignore_configcheck: true
  notify: restart apache
  when: ansible_distribution_release == "buster"


- name: Find out timezone
  slurp:
     src: /etc/timezone
  register: etc_timezone

- name: Set default timezone in php.ini debian 9
  replace:
    dest: /etc/php/{{ php_version }}/apache2/php.ini
    regexp: '^;date.timezone ='
    replace: 'date.timezone = "{{ etc_timezone["content"] | b64decode | regex_replace("\n") }}"'
  when: ansible_distribution_release != "buster"

- name: Set default timezone in php.ini debian 10
  replace:
    dest: /etc/php/{{ php_version_debian_10 }}/apache2/php.ini
    regexp: '^;date.timezone ='
    replace: 'date.timezone = "{{ etc_timezone["content"] | b64decode | regex_replace("\n") }}"'
  when: ansible_distribution_release == "buster"

- name: Ensure apache rewrite module is enabled
  apache2_module:
    name: rewrite
    state: present
  notify: restart apache

- name: Ensure Apache configuration for Icingaweb2 UI exists
  copy:
    src: "{{ apache_icinga_vhost_conf }}"
    dest: /etc/apache2/sites-enabled/icinga.conf
  notify: restart apache

- name: Disable default Apache configuration
  file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent
  notify: restart apache

- name: Configure Icinga salt
  lineinfile:
    dest: /etc/icinga2/constants.conf
    regexp: "^const TicketSalt = \"\"$"
    line: "const TicketSalt = \"{{ icinga_salt }}\""
    backrefs: yes
  notify: restart icinga2

- name: Create Icinga PKI
  command: /usr/sbin/icinga2 pki new-ca
  register: icingia_pki
  args:
    creates: /var/lib/icinga2/ca/ca.*

- name: Create Icinga certificate
  command: /usr/sbin/icinga2 pki new-cert --cn {{ inventory_hostname }} --key /etc/icinga2/pki/{{ inventory_hostname }}.key --csr /etc/icinga2/pki/{{ inventory_hostname }}.csr --cert /etc/icinga2/pki/{{ inventory_hostname }}.crt
  register: icinga_cert
  args:
   creates: /etc/icinga2/pki/{{ inventory_hostname }}.*

- name: Sign Icinga CSR
  when: icinga_cert.changed
  command: /usr/sbin/icinga2 pki sign-csr --csr /etc/icinga2/pki/{{ inventory_hostname }}.csr --cert /etc/icinga2/pki/{{ inventory_hostname }}.crt

- name: Copy Icinga CA certificate
  command: cp -vR --preserve=all /var/lib/icinga2/ca/ca.crt /etc/icinga2/pki
  when: icingia_pki.changed
  args:
    creates: /etc/icinga2/pki/ca.crt

- name: Register first installation var if external database is in use
  command: mysql -u {{monitoring_db_user}} -h {{mysql_host}} -p{{monitoring_db_password}} {{monitoring_db_name}} -e 'SELECT count(*) FROM information_schema.tables WHERE table_schema = "monitor";'
  register: isFirstExtInstallion
  when: (mysql_host is defined and 'localhost' not in mysql_host) and (mysql_host is defined and '127.0.0.1' not in mysql_host)

- name: Check if its the first installation on external database
  debug: msg="{{ isFirstExtInstallion.stdout_lines[1] }}"
  register: firstInstallDB
  changed_when: "{{isFirstExtInstallion.stdout_lines[1] | int}} == 0"
  when: isFirstExtInstallion.stdout_lines is defined and isFirstExtInstallion.stdout_lines[1] | int == 0

- name: Create Icinga databases
  mysql_db:
    name: "{{ item }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  no_log: true
  with_items:
    - "{{ monitoring_db_name }}"
    - "{{ monitoring_db_web_name }}"
  register: database_created
  when: isFirstExtInstallion.changed == false
  delegate_to: "{{ monitoring_db_host if monitoring_db_host != 'localhost' else inventory_hostname }}"

- name: Create Icinga database users and assign privileges
  mysql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    priv: "{{ item.db }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
    host: "%"
  no_log: true
  with_items:
    - { user: '{{monitoring_db_user}}', password: '{{monitoring_db_password}}', db: '{{monitoring_db_name}}' }
    - { user: '{{monitoring_db_web_user}}', password: '{{monitoring_db_web_password}}', db: '{{monitoring_db_web_name}}' }
  when: database_created.changed
  delegate_to: "{{ monitoring_db_host if monitoring_db_host != 'localhost' else inventory_hostname }}"

- name: Fetch the Icinga DB schemas
  fetch: src="{{ item.src }}" dest="{{ item.dest }}" flat=yes
  with_items:
    - { src: '/usr/share/icinga2-ido-mysql/schema/mysql.sql', dest: 'icinga2.sql'}
    - { src: '/usr/share/icingaweb2/etc/schema/mysql.schema.sql', dest: 'icingaweb2.sql'}
  when: database_created.changed

- name: Copy the Icinga DB schemas to the database server
  copy: src="{{ item.src }}" dest="{{ item.dest }}"
  with_items:
    - { src: 'icinga2.sql', dest: '/tmp/icinga2.sql'}
    - { src: 'icingaweb2.sql', dest: '/tmp/icingaweb2.sql'}
  when: database_created.changed
  delegate_to: "{{ monitoring_db_host if monitoring_db_host != 'localhost' else inventory_hostname }}"

- name: Import Icinga databases
  mysql_db:
    name: "{{ item.db }}"
    state: import
    login_user: root
    login_password: "{{ mysql_root_password }}"
    target: "{{ item.target }}"
  with_items:
    - { db: '{{ monitoring_db_name }}', target: '/tmp/icinga2.sql'}
    - { db: '{{ monitoring_db_web_name }}', target: '/tmp/icingaweb2.sql'}
  when: database_created.changed
  delegate_to: "{{ monitoring_db_host if monitoring_db_host != 'localhost' else inventory_hostname }}"

- name: Import Icinga database on external database server monitor DB
  mysql_db:
    state: import
    name: "{{monitoring_db_name}}"
    login_user: "{{monitoring_db_user}}"
    login_password: "{{monitoring_db_password}}"
    login_host: "{{mysql_host}}"
    login_port: "{{mysql_port | int}}"
    target: "/usr/share/icinga2-ido-mysql/schema/mysql.sql"
  when: firstInstallDB.changed

- name: Import Icinga database on external database server monitor_web DB
  mysql_db:
    state: import
    name: "{{monitoring_db_web_name}}"
    login_user: "{{monitoring_db_web_user}}"
    login_password: "{{monitoring_db_web_password}}"
    login_host: "{{mysql_host}}"
    login_port: "{{mysql_port | int}}"
    target: "/usr/share/icingaweb2/etc/schema/mysql.schema.sql"
  when: firstInstallDB.changed

- name: Delete the Icinga DB schemas from the database server
  file: dest="{{ item }}" state=absent
  with_items:
    - "/tmp/icinga2.sql"
    - "/tmp/icingaweb2.sql"
  when: database_created.changed
  delegate_to: "{{ monitoring_db_host if monitoring_db_host != 'localhost' else inventory_hostname }}"

- name: Delete the Icinga DB schemas from localhost
  file: dest="{{ playbook_dir }}/{{ item }}" state=absent
  with_items:
    - "icinga2.sql"
    - "icingaweb2.sql"
  when: database_created.changed
  delegate_to: localhost
  become: no

- name: Encrypt Icinga web admin user password
  command: 'openssl passwd -1 "{{ icinga_admin_password }}"'
  register: icinga_admin_password
  when: database_created.changed or firstInstallDB.changed

- name: Add admin user to Icinga web database
  command: >
    mysql --user='{{ monitoring_db_web_user }}' --password='{{ monitoring_db_web_password }}' --host='{{ monitoring_db_host }}' --port='{{ monitoring_db_port }}' '{{ monitoring_db_web_name }}'
    --execute="INSERT INTO icingaweb_user (name, active, password_hash) VALUES ('admin', 1, '{{ icinga_admin_password.stdout }}');"
  when: database_created.changed or firstInstallDB.changed

- name: Generate Icinga configuration files
  template: src={{ item }}.j2 dest=/etc/icinga2/conf.d/{{ item }}
  notify: restart icinga2
  with_items:
    - api-users.conf
    - users.conf
    - groups.conf
    - services.conf
    - hosts.conf
    - notifications.conf

- name: Remove old apt check config
  file:
    path: /etc/icinga2/conf.d/apt.conf
    state: absent
  notify: restart icinga2

- name: Enable monitoring module
  command: /usr/bin/icingacli module enable monitoring
  args:
    creates: /etc/icingaweb2/enabledModules/monitoring

- name: Ensure monitoring module directory exists
  file:
    path: "/etc/icingaweb2/modules/monitoring"
    owner: www-data
    group: icingaweb2
    mode: 0755
    state: directory

- name: Generate icingaweb2 configuration files
  template: src={{ item.src }} dest={{ item.dest }} mode=0664
  with_items:
    - { src: 'config.ini.j2', dest: '/etc/icingaweb2/config.ini' }
    - { src: 'resources.ini.j2', dest: '/etc/icingaweb2/resources.ini' }
    - { src: 'authentication.ini.j2', dest: '/etc/icingaweb2/authentication.ini' }
    - { src: 'roles.ini.j2', dest: '/etc/icingaweb2/roles.ini' }
    - { src: 'module-config.ini.j2', dest: '/etc/icingaweb2/modules/monitoring/config.ini' }
    - { src: 'backends.ini.j2', dest: '/etc/icingaweb2/modules/monitoring/backends.ini' }
    - { src: 'commandtransports.ini.j2', dest: '/etc/icingaweb2/modules/monitoring/commandtransports.ini' }

- name: Configure sender address for notifications
  replace:
    dest: /etc/icinga2/scripts/{{ item }}
    regexp: '\mail -s'
    replace: 'mail -r "{{ sender_address}}" -s'
  with_items:
    - mail-host-notification.sh
    - mail-service-notification.sh
  notify: restart icinga2

- name: Configure Icinga2 zones
  template: src=zones.conf.j2 dest=/etc/icinga2/zones.conf
  notify: restart icinga2

- name: Create new zone dir for debian 10
  file:
    path: /etc/icinga2/zones.d/{{ inventory_hostname }}
    owner: nagios
    group: nagios
    state: directory
  when:  ansible_distribution_release == "buster"

- name: Copy files from old to new dir
  shell: 'sudo mv /etc/icinga2/conf.d/* /etc/icinga2/zones.d/{{ inventory_hostname }}'
  become: yes
  when:  ansible_distribution_release == "buster"