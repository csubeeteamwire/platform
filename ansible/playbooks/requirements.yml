---
##### THIS HAS TO GO FIRST #####
- hosts: 127.0.0.1
  connection: local
  become: no
  pre_tasks:
    - include_vars: ../roles/common/vars/main.yml
    - name: Check Ansible version
      assert:
        that: "ansible_version.full is version_compare('{{ required_ansible_version }}', '==')"
        msg:
          - "Ansible {{ required_ansible_version }} is required, please run the upgrade procedure"
          - "If running a single-server setup, run: ansible-playbook -i hosts playbooks/procedures/upgrade-ansible.yml"
          - "If running a clustered-server setup, run: ansible-playbook -i cluster_hosts playbooks/procedures/upgrade-ansible.yml"

- name: Ensure config_done is not set during Packer image builds
  hosts: all
  tasks:
  - fail:
      msg:
        - "The config_done variable is defined, this cannot be present during packer builds."
        - "Please ensure there is no group_vars/all configuration file in place."
    when: packer_build_name is defined and config_done is defined

- name: Ensure config_done is defined on cluster setups
  hosts: all
  tasks:
  - fail:
      msg:
        - "The config_done variable is not defined."
        - "Please ensure there is a group_vars/all configuration file in place and config_done is set to true."
    when: groups['all'] | length() > 1 and config_done is not defined

- name: Ensure a proper backend version has been set
  hosts: all
  tasks:
  - fail:
      msg:
        - "ERROR: group_vars/all => version: '{{ version if version is defined else 'not set' }}'."
        - "Please set a valid backend version in group_vars/all variable 'version'"
        - "To display the latest valid backend versions, please run twctl show-tags"
    when: packer_build_name is not defined and vagrant_mode is not defined and (version is not defined or version | lower == "prod" or version == None or version | length == 0)

- name: Check if in developer mode
  hosts: all
  tasks:
    - set_fact: TW_DEV_MODE="{{ lookup('env', 'TW_DEV_MODE' ) | ternary (lookup('env', 'TW_DEV_MODE' ), omit) }}"
      delegate_facts: true
      run_once: true

- name: Validate configuration values
  hosts: all
  tasks:
    - name: Assert use_teamwire_registry is valid
      assert:
        that:
          - use_teamwire_registry is string
          - use_teamwire_registry | lower is in ['true', 'false']
        msg: >-
          Invalid value for configuration option `use_teamwire_registry`.
          Please ensure your value is enquoted and is either 'true' or 'false'.
      run_once: true
      when: use_teamwire_registry is defined

- name: Ensure valid configuration combination
  hosts: all
  tasks:
    - block:
        - name: Retrieve name of playbook file
          set_fact: playbook_name="{{ (lookup('file', '/proc/self/cmdline') | regex_replace('\u0000',' ')).split()|select('match','^[a-z-_/]*[.]y[a]*ml')|list|first|basename }}"

        # Checks if in single set-up
        - set_fact: installation_type="single"
          delegate_facts: true
          run_once: true
          when: groups['all'] | length() == 1 and inventory_file | basename == "hosts"

        # Checks if in cluster set-up
        - set_fact: installation_type="cluster"
          delegate_facts: true
          run_once: true
          when: groups['all'] | length() > 1 and inventory_file | basename == "cluster_hosts"

        # Finds all procedure plays in the relevant directory and against the yaml pattern only. This will also add our standard playbooks to the whitelist.
        - set_fact:
            permitted_playbooks: "{{query('fileglob', '{{inventory_dir}}/playbooks/procedures/*.yml') | map('basename')|list}} + 'site.yml' + 'cluster.yml'"

        # An asserstion is made to ensure a valid configuration. This doesn't perform a configuration check if in Developer mode.
        - assert:
            that:
              - "'installation_type' is defined"
              - "playbook_name in permitted_playbooks"
            msg:
              - "WARNING: Incorrect configuration detected. Please ensure you are using the correct inventory file, playbook and variable config file."
              - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
      when:
        - TW_DEV_MODE is not defined
        - packer_build_name is not defined
        - vagrant_mode is not defined

- name: Ensure valid management server configuration
  hosts: all
  tasks:
  - assert:
     that:
       - "'management_servers' in groups"
       - groups['management_servers'] | length > 0
     msg:
       - "WARNING: No management servers have been defined."
       - "Management servers (group: management_servers), is a new management server group which you'll run twctl and Ansible provisions from."
       - "WARNING: You must ensure all the relevant certificates, cluster_hosts and group_vars/all files are moved/adapted to the assigned management servers before proceeding."
       - "You should also ensure the Vault token is in place at /root/.vault-token and /home/teamwire/.vault-token."
       - "You must ensure at least 1 management server is defined in cluster_hosts, please check cluster_example_hosts for a reference."
       - "If you encounter any problems or have any concerns, please contact support@teamwire.eu"
    run_once: true
    when: groups['all'] | length() > 1

- name: Ensure valid Hashi server group configuration
  hosts: all
  tasks:
  - assert:
     that:
       - "'hashi_servers' in groups"
       - "'consul_servers' not in groups"
     msg:
       - "WARNING: Please ensure the hashi_servers group has been defined in the cluster_hosts file and the consul_servers group no longer exists."
       - "The consul_servers group has been renamed to hashi_servers."
       - "Please refer to the cluster_example_hosts file for an example."
    run_once: true
    when: groups['all'] | length() > 1

- name: Ensure valid Storage server group configuration
  hosts: all
  tasks:
  - assert:
     that:
       - "'nfs_servers' not in groups"
     msg:
       - "WARNING: Please ensure the storage_servers group has been defined in the cluster_hosts file and the nfs_servers group no longer exists."
       - "The nfs_servers group has been renamed to storage_servers."
       - "Please refer to the cluster_example_hosts file for an example."
    run_once: true
    when: groups['all'] | length() > 1

- name: Get current git tag
  hosts: all
  tasks:
  - command: "git describe --always --tags"
    args:
      chdir: "{{ inventory_dir if inventory_dir is defined else (ansible_inventory_sources[0] | dirname) }}"
    register: current_local_tag_var
    when: packer_build_name is not defined
    delegate_to: localhost
    become: no
  run_once: true
  check_mode: no

- name: Set fact current_local_tag
  hosts: all
  pre_tasks:
    - set_fact:
         current_local_tag: "{{ current_local_tag_var.stdout }}"
      when: packer_build_name is not defined

- name: Ensure voip group is configured properly when enabled
  hosts: all
  gather_facts: false
  tasks:
  - assert:
     that:
       - "'voip_servers' in groups"
       - groups['voip_servers'] | length() == 1
     msg:
       - "ERROR: Ensure that group 'voip_servers' exists when voip feature is enabled and"
       - "ensure that only one server in group 'voip_servers' is defined in file {{ inventory_file }}!"
    when:
      - groups['all'] | length() > 1
      - enable_voip is defined and enable_voip | string() == 'true'
    run_once: true

- name: Set current git tag (incomplete) in /etc/platform_version
  hosts: all
  tasks:
  - copy:
      dest: /etc/platform_version
      content: '{{ current_local_tag if current_local_tag is defined else "NONE" }}(incomplete)'
      owner: root
      group: root
      mode: 0644
    when: packer_build_name is not defined
##### END ######

- name: Vault Status check
  hosts: local:hashi_servers
  tasks:
    - include_role: # Single only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined and ansible_local.vault.initialized == "true" and secrets_read is not defined
        - groups['all'] | length() == 1
    - include_role: # Cluster only
        name: ../roles/vault
        tasks_from: secrets
      when:
        - ansible_local.vault is defined and ansible_local.vault.initialized == "true" and secrets_read is not defined
        - groups['all'] | length() > 1

- name: Check for deprecated variables
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - block:
      - fail:
          msg:
            - "WARNING: The variable ssl_certfile is deprecated and will not work in future releases."
      - pause:
          seconds: 5
      ignore_errors: yes
      when: ssl_certfile is defined and config_done is defined

- name: Register cert subject organisation
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -subject -noout | grep -Po 'O = .*,' | sed 's/. OU.*//' | sed 's/O = //'
      register: cert_subject_org
      when: packer_build_name is not defined and config_done is defined and ( ssl_certfile is defined or ssl_server_certificate is defined )

- name: Register cert issuer organisation
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - shell: openssl x509 -in {{ ssl_certfile if ssl_certfile is defined else ssl_server_certificate }} -issuer -noout | grep -Po 'O = .*,' | sed 's/O = //' | sed 's/,//'
      register: cert_issuer_org
      when: packer_build_name is not defined and config_done is defined and ( ssl_certfile is defined or ssl_server_certificate is defined )

- name: Check if Certificate is self signed
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - block:
      - fail:
          msg: "Self signed certificates are not supported. We cannot provide warranty or support for this installation."
      - pause:
          seconds: 5
      ignore_errors: yes
      when: cert_subject_org.stdout is defined and cert_issuer_org.stdout is defined and cert_subject_org.stdout == cert_issuer_org.stdout

- name: Perform SSL-Preflight check
  hosts: 127.0.0.1
  connection: local
  tasks:
  - include_tasks: ../roles/frontend/tasks/ssl-check.yml
    vars:
      ssl_first_check: yes
    when: packer_build_name is not defined
  become: no
  run_once: true

- hosts: all
  tasks:
  - block:
      - name: Check APNS certificate is valid and doesn't expire within the next month
        openssl_certificate:
          path: "{{ apns_certificate }}"
          provider: assertonly
          valid_in: "2630000"
        when: config_done is defined
        run_once: true
        delegate_to: localhost
        become: no
    rescue:
      - debug:
          msg: 'Please change your APN-Certificate immediately'

- name: Ensure the secondary APNS certificate is configured correctly
  hosts: all
  tasks:
    - fail: msg="The secondary APNS certificate is not configured correctly."
      when: apns_certificate_2 is defined and apns_appid_2 is not defined or apns_appid_2 is defined and apns_certificate_2 is not defined

- hosts: all
  tasks:
  - block:
      - name: Check the secondary APNS certificate is valid and doesn't expire within the next month
        openssl_certificate:
          path: "{{ apns_certificate_2 }}"
          provider: assertonly
          valid_in: "2630000"
        when: apns_certificate_2 is defined
        run_once: true
        delegate_to: localhost
        become: no
    rescue:
      - debug:
          msg: 'Please change your secondary APN-Certificate immediately'

- name: Ensure the third APNS certificate is configured correctly
  hosts: all
  tasks:
    - fail: msg="The third APNS certificate is not configured correctly."
      when: apns_certificate_3 is defined and apns_appid_3 is not defined or apns_appid_3 is defined and apns_certificate_3 is not defined

- hosts: all
  tasks:
  - block:
      - name: Check the third APNS certificate is valid and doesn't expire within the next month
        openssl_certificate:
          path: "{{ apns_certificate_3 }}"
          provider: assertonly
          valid_in: "2630000"
        when: apns_certificate_3 is defined
        run_once: true
        delegate_to: localhost
        become: no
    rescue:
      - debug:
          msg: 'Please change your third APN-Certificate immediately'



- name: Check if installing offline
  hosts: 127.0.0.1
  tasks:
    - stat: path=/etc/offline_installation
      register: offline_mode

# Check for unattended-upgrades
- name: Wait for automatic system updates to complete
  hosts: all
  tasks:
    - shell: while pgrep /usr/bin/unattended-upgrade; do sleep 1; done;
