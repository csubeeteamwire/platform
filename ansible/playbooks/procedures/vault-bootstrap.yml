- hosts: all
  pre_tasks:
    - include_vars: ../../roles/common/vars/main.yml
    - include_vars: ../../group_vars/all
    - name: Check Ansible version
      assert:
        that: "ansible_version.full is version_compare('{{ required_ansible_version }}', '==')"
        msg:
          - "Ansible {{ required_ansible_version }} is required, please run the upgrade procedure"
          - "If running a single-server setup, run: ansible-playbook -i hosts playbooks/procedures/upgrade-ansible.yml"
          - "If running a clustered-server setup, run: ansible-playbook -i cluster_hosts playbooks/procedures/upgrade-ansible.yml"

    - fail: msg="Please ensure your group_vars/all file is correctly configured and try again."
      when: config_done is not defined

    - fail: msg="You have the variable disable_vault defined and set to true in your config file, aborting bootstrap."
      when: disable_vault is defined and disable_vault| lower() == "true"

  tasks:
  - name: Set procedure fact
    set_fact:
      vault_bootstrap_procedure: "true"
    run_once: True
    delegate_facts: True

- name: Deploy Vault requirements
  hosts: all
  roles:
    - ../../roles/common
    - { role: ../../roles/consul, when: "groups['all'] | length() > 1" }
    - { role: ../../roles/vault, when: "groups['all'] | length() == 1 or inventory_hostname in groups['hashi_servers']" }

- name: Bootstrap Vault
  hosts: local:hashi_servers
  tasks:

  - include_vars: ../../roles/vault/defaults/main.yml
  - include_vars: ../../group_vars/all

  - fail:
      msg: >
        "Vault has already been bootstrapped. Please email support@teamwire.eu if you require support on this."
    when: ansible_local.vault is defined and ansible_local.vault.initialized == "true"

  - name: Initiate Vault
    command: vault operator init -key-shares=6 -key-threshold=2 -format=json
    register: vault_info
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Extract Vault unseal keys and root token
    run_once: True
    set_fact:
      vault_keys: "{{ (vault_info.stdout|from_json)['unseal_keys_b64'] }}"
      vault_token: "{{ (vault_info.stdout|from_json)['root_token'] }}"
    delegate_facts: True
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: Create Vault credentials file
    template:
      src: ../../roles/vault/templates/credentials.j2
      dest: "{{ inventory_dir }}/vault-credentials"
    run_once: True
    delegate_to: localhost
    become: no

  - name: Set temporary VAULT_TOKEN environment variable
    shell: export VAULT_TOKEN="{{ vault_token }}"

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    no_log: true
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Wait for Vault to elect a leader
    wait_for:
      host: active.vault.service.consul
      port: 8200
    when: groups['all'] | length() > 1

  - name: Authorise root user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /root/.vault-token
      mode: 0400
      owner: root
      group: root

  - name: Authorise teamwire user for Vault login
    copy:
      content: "{{ vault_token }}"
      dest: /home/teamwire/.vault-token
      mode: 0400
      owner: teamwire
      group: teamwire

  - name: Enable audit logging
    command: vault audit enable file file_path=/var/log/vault_audit.log
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    run_once: true

  - name: Enable Vault autocomplete
    command: vault -autocomplete-install
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    become_user: teamwire

  #Enable TLS

  - name: Enable PKI backend
    command: vault secrets enable pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Set max global SSL lease to 25 years
    command: vault secrets tune -max-lease-ttl=219000h pki
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Generate Root CA certificate
    command: vault write pki/root/generate/internal common_name="Vault Root CA" ttl=219000h
    register: root_ca
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create certificate revocation list
    command: vault write pki/config/urls issuing_certificates="http://127.0.0.1:8200/v1/pki/ca" crl_distribution_points="http://127.0.0.1:8200/v1/pki/crl"
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Create role for issuing certificates
    command: vault write pki/roles/tls allow_any_name=true allowed_domains=localhost allow_subdomains=true allow_ip_sans="true" max_ttl=26280h
    run_once: True
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Issue a TLS certificate for Vault to use
    command: vault write pki/issue/tls common_name="127.0.0.1" alt_names=""{{ groups['hashi_servers'] | map('extract', hostvars, ['inventory_hostname']) | join(',') + ',' if groups['all'] | length() > 1 else '' }}"localhost,*.node.dc1.consul,*.vault.service.dc1.consul,vault.service.consul" ip_sans=""{{ groups['hashi_servers'] | map('extract', hostvars, ['private_ip']) | join(',') + ',' if groups['all'] | length() > 1 else '' }}"127.0.0.1" ttl="{{ vault_certificate_ttl }}" --format=json
    run_once: True
    register: issue_info
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"

  - name: Set certificate fact
    set_fact:
      vault_certificate: "{{ issue_info.stdout | from_json }}"
    run_once: True
    delegate_facts: True
    delegate_to: "{{ item }}"
    with_items: "{{ groups['all'] }}"

  - name: Install Vault root CA, tls certificate and private key
    copy: content={{ item.content }} dest={{ item.dest }}
    with_items:
      - { content: '{{ vault_certificate.data.issuing_ca }}', dest: '/usr/local/share/ca-certificates/vault-rootCA.crt' }
      - { content: '{{ vault_certificate.data.certificate }}', dest: '/var/lib/vault/ssl/vault.crt' }
      - { content: '{{ vault_certificate.data.private_key }}', dest: '/var/lib/vault/ssl/vault.pem' }
    become: yes

  - name: Trust the Vault Root CA
    command: update-ca-certificates

  - name: Enable SSL in Vault configuration
    replace:
      path: /etc/vault/vault.hcl
      regexp: 'tls_disable.*'
      replace: 'tls_disable = 0'

  - name: Restart Vault so that it uses TLS
    service:
      name: vault
      state: restarted

  - name: Unseal Vault
    command: vault operator unseal "{{ item }}"
    no_log: true
    with_items:
      - "{{ vault_keys[0] }}"
      - "{{ vault_keys[1] }}"

  - name: Wait for Vault to elect a leader
    wait_for:
      host: active.vault.service.consul
      port: 8200
    when: groups['all'] | length() > 1

  - name: Write and migrate secrets
    command: vault write secret/"{{ item.secret }}" value="{{ item.value }}"
    no_log: True
    with_items:
      - { secret: 'dockerhub/password', value: "{{ dockerhub_password | default('') }}" }
      - { secret: 'keys/gcm', value: "{{ gcm_api_key | default('') }}" }
      - { secret: 'database/password', value: "{{ teamwire_db_password | default('') }}" }
      - { secret: 'database/aes_key', value: "{{ aes_key | default('') }}" }
      - { secret: 'dbserver/mysql_root_password', value: "{{ mysql_root_password | default('') }}" }
      - { secret: 'dbserver/clustercheck_password', value: "{{ clustercheck_password | default('') }}" }
      - { secret: 'dbserver/xtrabackup_password', value: "{{ xtrabackup_password | default('') }}" }
      - { secret: 'redis/password', value: "{{ redis_pass | default('') }}" }
      - { secret: 'smtp/password', value: "{{ smtp_smartpass | default('') }}" }
      - { secret: 'monitoring/db_password', value: "{{ monitoring_db_password | default('') }}" }
      - { secret: 'monitoring/db_web_password', value: "{{ monitoring_db_web_password | default('') }}" }
      - { secret: 'monitoring/icinga_admin_password', value: "{{ icinga_admin_password | default('') }}" }
      - { secret: 'monitoring/icinga_salt', value: "{{ icinga_salt | default('') }}" }
      - { secret: 'monitoring/icinga_api_password', value: "{{ icinga_api_password | default('') }}" }
    run_once: true

  - name: Generate secret paths for user secrets
    command: vault write "{{ item.value.path }}" value=""
    no_log: True
    with_dict: "{{ user_secrets }}"
    run_once: true
    when: user_secrets is defined

  - name: Backup the all file
    copy:
      src: "{{ inventory_dir }}/group_vars/all"
      dest: "{{ inventory_dir }}/group_vars/all.backup.{{ ansible_date_time.date }}"
    become: no
    run_once: true
    delegate_to: localhost


  - name: Update group_vars/all file
    lineinfile:
      path: "{{ inventory_dir }}/group_vars/all"
      regexp: "{{ item + ':.*$' }}"
      state: absent
    with_items:
      - dockerhub_password
      - gcm_api_key
      - teamwire_db_password
      - aes_key
      - mysql_root_password
      - clustercheck_password
      - xtrabackup_password
      - redis_pass
      - smtp_smartpass
      - monitoring_db_password
      - monitoring_db_web_password
      - icinga_admin_password
      - icinga_salt
      - icinga_api_password
      - disable_vault
    delegate_to: localhost
    become: no

  - name: Reload Ansible local facts to register Vault status
    setup: filter=ansible_local

  - name: Include secrets var file so the defined secrets can be read
    include_tasks: ../../roles/vault/tasks/secrets.yml

  - name: Confirm Dockerhub password if empty
    block:
      - pause:
          prompt: "Dockerhub password required. Please enter the password for {{ dockerhub_username }}"
        register: pause_entry
      - command: vault write secret/dockerhub/password value="{{ pause_entry.user_input }}"
    no_log: true
    run_once: true
    when: dockerhub_password == ""

  - name: Confirm Google API key if empty
    block:
      - pause:
          prompt: "Google API key required. Please enter the key you have received from us."
        register: pause_entry
      - command: vault write secret/keys/gcm value="{{ pause_entry.user_input }}"
    no_log: true
    run_once: true
    when: gcm_api_key == ""

  - pause:
      prompt: "Does your smtp server require password authentication? (yes/no)"
    register: smtp_smartpass_required
    when: smtp_smartpass == ""

  - name: Confirm SMTP password if empty
    block:
      - pause:
          prompt: "SMTP password required. Please confirm the password for {{ smtp_smartuser }}"
        register: pause_entry
      - command: vault write secret/smtp/password value="{{ pause_entry.user_input }}"
    no_log: true
    run_once: true
    when: (smtp_smartpass == "" and 'yes' in smtp_smartpass_required|lower) or
          (smtp_smartpass == "" and 'y' in smtp_smartpass_required|lower)

  - name: Confirm teamwire database password if empty and using external database host
    block:
      - pause:
          prompt: "Database password required. Please confirm the password for {{ teamwire_db_user }}"
        register: pause_entry
      - command: vault write secret/database/password value="{{ pause_entry.user_input }}"
    no_log: true
    run_once: true
    when: (mysql_host is defined and teamwire_db_password == "") or
          (oracle_host is defined and teamwire_db_password == "")

  - pause:
      prompt: "Would you like to use an AES key from an existing installation? (yes/no)"
      echo: yes
    register: aes_confirm
    when: aes_key == ""

  - name: Confirm Database AES key
    block:
      - pause:
          prompt: "Database AES key required. Please confirm the AES key."
        register: pause_entry
      - command: vault write secret/database/aes_key value="{{ pause_entry.user_input }}"
    no_log: true
    run_once: true
    when: "'yes' in aes_confirm|lower or 'y' in aes_confirm|lower"

  - name: Load user-specified secrets
    set_fact:
      secrets: "{{ secrets|combine(user_secrets) }}"
    when: user_secrets is defined

  - name: Reload secrets variables to recognise changes
    include_tasks: ../../roles/vault/tasks/secrets.yml

  - name: Generate and write internal secrets if empty
    shell: >
      generated_secret=$(pwgen -s 32 1) &&
      vault write "{{ item.value.path }}" value=$generated_secret
    when: hostvars[inventory_hostname][item.key] == "" and item.key != "smtp_smartpass"
    no_log: true
    run_once: true
    with_dict: "{{ secrets }}"

- name: Run Nomad role to apply Vault integration
  hosts: hashi_servers:backend_servers
  tasks:
  - include_role:
      name: ../../roles/nomad

- name: Distribute Vault SSL certificates to all remaining hosts that require them
  hosts: all:!hashi_servers
  tasks:
    - block:
        - name: Create Vault SSL directory
          file: path=/var/lib/vault/ssl mode=0750 state=directory
        - name: Install Vault root CA, tls certificate and private key
          copy: content={{ item.content }} dest={{ item.dest }}
          with_items:
            - { content: '{{ vault_certificate.data.issuing_ca }}', dest: '/usr/local/share/ca-certificates/vault-rootCA.crt' }
            - { content: '{{ vault_certificate.data.certificate }}', dest: '/var/lib/vault/ssl/vault.crt' }
            - { content: '{{ vault_certificate.data.private_key }}', dest: '/var/lib/vault/ssl/vault.pem' }
        - name: Trust the Vault Root CA
          command: update-ca-certificates
      when: vault_certificate is defined and groups['all'] | length() > 1

- hosts: all
  tasks:
  - debug: msg="Vault has now been bootstrapped, the Vault credentials have been stored in the main local Ansible directory. The all file has been updated to use Vault, a backup has been placed in the group_vars directory."
  run_once: true
